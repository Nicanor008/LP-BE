openapi: 3.0.0
info:
  version: 1.0.1
  title: Auth Module API documentation
  description: This is an API for the auth and users. Developed due to the re-usability required for the APIs authentication and authorization.
servers:
  - url: '{protocol}://127.0.0.1:{port}/'
    description: Development server (uses test data)
    variables:
      port:
        enum:
          - '4000'
          - '4001'
        default: '4001'
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'

components:
  schemas:
    errors:
      properties:
        description: Something went wrong. Try again

    User:
      type: object
      properties:
        name:
          type: String
          example: test Username
        email:
          type: String
          example: testUsername@gmail.com
        role:
          type: String
          example: user
        password:
          type: String
          example: AveryStrongPassword
        active:
          type: Boolean
          example: true
        verified:
          type: Boolean
          example: true
        pictureUrl:
          type: String
          example: ./images/1234.jpg
      Todo:
        type: object
        properties:
          name:
            type: String
            example: This is the first todo item
          startTime:
            type: Date
            example: 2020-05-05T14:14:57.988Z
          endTime:
            type: Date
            example: 2020-05-05T14:14:57.988Z
          duration:
            type: String
            example: 4 hours
          user:
            type: ObjectID
            example: 5eb17400111b219364f89b46

paths:
  /auth/register:
    post:
      summary: Regiter User
      description: Adds user to the users collection
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: String
                  example: test Username
                email:
                  type: String
                  example: testUsername@gmail.com
                role:
                  type: String
                  example: user
                password:
                  type: String
                  example: AveryStrongPassword
      responses:
        201:
          description: Account created. Check your email to activate account
        409:
          description: Email already  exist
        500:
          $ref: '#/components/schemas/errors/properties'
  
  /auth/verify/{email}:
    patch:
      summary: Verify account
      tags:
        - Users
      parameters:
        - in: path
          name: email
          description: User email used to create account
          required: true
          schema:
            type: string
      responses:
        200:
          description: Account has been verified
        404:
          description: Account :email does not exist
        500:
          $ref: '#/components/schemas/errors/properties'

  /auth/login:
    post:
      summary: Login Users
      description: authenticate users into the system
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: String
                  example: testUsername@gmail.com
                password:
                  type: String
                  example: AveryStrongPassword
      responses:
        200:
          description: Login successful
        403:
          description: Account has not been verified
        404:
          description: Email does not exist or Wrong password
        500:
          $ref: '#/components/schemas/errors/properties'

  /users:
    get:
      summary: Fetch all users
      tags:
        - Users
      responses:
        200:
          description: All users
        404: 
          description: No Users available
        500:
          $ref: '#/components/schemas/errors/properties'
  
  /todo:
    post:
      summary: Create a new todo item
      tags:
        - Todo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: String
                  example: This is the first todo item
                category:
                  type: String
                  example: todo/goal/reminder
                startTime:
                  type: Date
                  example: 2020-05-05T14:14:57.988Z
                endTime:
                  type: Date
                  example: 2020-05-05T14:14:57.988Z
                duration:
                  type: String
                  example: 4 hours
                user:
                  type: ObjectID
                  example: 5eb17400111b219364f89b46
      responses:
        200:
          description: Todo Item has been created
        404:
          description: Todo item name is required
        500:
          $ref: '#/components/schemas/errors/properties'
  
  /todo:
    get:
      summary: Fetch all todos
      tags:
        - Todo
      responses:
        200:
          description: Your Todo Items
        404: 
          description: No Todo items
        500:
          $ref: '#/components/schemas/errors/properties'

  /todo/user:
    get:
      summary: Fetch user todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Your all todo items
        404: 
          description:You don't have any todo items
  
  /todo/ongoing:
    get:
      summary: Get all ongoing/in-progress todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description:  2 Todo done
        404: 
          description: You don't have any todo items
        
  /todo/complete:
    get:
      summary: Get all completed todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description: 2 ongoing todo
        404: 
          description:You don't have any todo items

  /todo/ongoing/:id:
    patch:
      summary: Update todo either as done or in progress
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Todo item id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: Boolean
                  example: false
      responses:
        200:
          description:  Todo item updated
        404: 
          description: Completed status is required

  /todo/archive:
    get:
      summary: Fetch all archived todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200: description: Archived todo items
        404: description: No archived todo items

  /todo/archive/:_id:
    patch:
      summary: Archive or unarchive a todo item
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
        - in: path
          name: _id
          description: Todo item id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                archived:
                  type: Boolean
                  example: false
      responses:
        200:
          description:  Todo has been archived
        404: 
          description: Todo item doesn't exists
  
  /todo/:_id:
    delete:
      summary: Delete a single todo item
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
        - in: path
          name: _id
          description: Todo item id
          required: true
          schema:
            type: string
      responses:
        200:
          description:  Todo item deleted
        404: 
          description: Todo item does not exist
  
  /todo/user:
    delete:
      summary: Delete all user todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description:  2 todo items deleted
        404: 
          description: You don't have any todo items
  
  /todo/:_id:
    get:
      summary: Get a single todo item
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
        - in: path
          name: _id
          description: Todo item id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Todo item
        404: 
          description: Todo item not available

  /todo/:_id:
    patch:
      summary: Update an existing todo item
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
        - in: path
          name: _id
          description: Todo item id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: String
                  example: Updated todo item
      responses:
        200:
          description: Todo item
        404: 
          description: Todo item not available

  /todo/search/:name:
    get:
      summary: Search Todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: name
          description: Todo item name
          required: true
          schema:
            type: string
      responses:
        200:
          description: 2 todo found
        404: 
          description: No todo with ${name} found
  
  /todo/tags/:tag:
    get:
      summary: Filter todo by tags
      tags:
        - Todo
      parameters:
        - in: path
          name: tag
          description: Todo tag names
          required: true
          schema:
            type: string
      responses:
        200:
          description: 2 todo with tag ${tag}
        404: 
          description: No todo with tag ${name} found
  
  /analytics/todo:
    get:
      summary: Get analytics for your todo items
      tags:
        - Todo
      parameters:
        - in: path
          name: token
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Awesome, here is your Analytics data
        404: 
          description: Sorry Champ, No items available to generate analytics
